// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Follower {
  id         String  @id @default(cuid())
  userId     String
  followerId String
  Habit      Habit?  @relation(fields: [habitId], references: [id])
  habitId    String?

  @@unique([userId, followerId])
}

model Habit {
  id        String     @id @default(cuid())
  action    String // Changed from 'message' to 'action' for clarity
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitLogs HabitLog[]
  followers Follower[]
  lastUpdated DateTime @default(now())
}

model HabitLog {
  id        String      @id @default(cuid())
  date      DateTime    @default(now())
  createdAt DateTime    @default(now())
  status    HabitStatus @default(Empty)
  habitId   String
  habit     Habit       @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

enum HabitStatus {
  Success
  Fail
  Empty
}
